<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        YII=
</value>
  </data>
</root>